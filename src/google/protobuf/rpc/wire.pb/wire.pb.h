// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wire.proto

#ifndef PROTOBUF_wire_2eproto__INCLUDED
#define PROTOBUF_wire_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/xml/xml_message.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace protobuf {
namespace rpc {
namespace wire {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_wire_2eproto();
void protobuf_AssignDesc_wire_2eproto();
void protobuf_ShutdownFile_wire_2eproto();

class Const;
class RequestHeader;
class ResponseHeader;

// ===================================================================

class Const : public ::google::protobuf::Message {
 public:
  Const();
  virtual ~Const();

  Const(const Const& from);

  inline Const& operator=(const Const& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Const& default_instance();

  void Swap(Const* other);

  // implements Message ----------------------------------------------

  Const* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Const& from);
  void MergeFrom(const Const& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // xml support -----------------------------------------------------

  // Parse a protocol buffer contained in a string.
  bool ParseFromXmlString(const std::string& data);
  // Like ParseFromXmlString(), but accepts messages that are missing
  // required fields.
  bool ParsePartialFromXmlString(const std::string& data);

  // Serialize the message and store it in the given string.  All required
  // fields must be set.
  bool SerializeToXmlString(std::string* output) const;
  // Like SerializeToXmlString(), but allows missing required fields.
  bool SerializePartialToXmlString(std::string* output) const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 max_header_len = 1 [default = 1024];
  inline bool has_max_header_len() const;
  inline void clear_max_header_len();
  static const int kMaxHeaderLenFieldNumber = 1;
  inline ::google::protobuf::uint32 max_header_len() const;
  inline void set_max_header_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:google.protobuf.rpc.wire.Const)
 private:
  inline void set_has_max_header_len();
  inline void clear_has_max_header_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 max_header_len_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();

  void InitAsDefaultInstance();
  static Const* default_instance_;
};
// -------------------------------------------------------------------

class RequestHeader : public ::google::protobuf::Message {
 public:
  RequestHeader();
  virtual ~RequestHeader();

  RequestHeader(const RequestHeader& from);

  inline RequestHeader& operator=(const RequestHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestHeader& default_instance();

  void Swap(RequestHeader* other);

  // implements Message ----------------------------------------------

  RequestHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestHeader& from);
  void MergeFrom(const RequestHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // xml support -----------------------------------------------------

  // Parse a protocol buffer contained in a string.
  bool ParseFromXmlString(const std::string& data);
  // Like ParseFromXmlString(), but accepts messages that are missing
  // required fields.
  bool ParsePartialFromXmlString(const std::string& data);

  // Serialize the message and store it in the given string.  All required
  // fields must be set.
  bool SerializeToXmlString(std::string* output) const;
  // Like SerializeToXmlString(), but allows missing required fields.
  bool SerializePartialToXmlString(std::string* output) const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional string method = 2;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 2;
  inline const ::std::string& method() const;
  inline void set_method(const ::std::string& value);
  inline void set_method(const char* value);
  inline void set_method(const char* value, size_t size);
  inline ::std::string* mutable_method();
  inline ::std::string* release_method();
  inline void set_allocated_method(::std::string* method);

  // optional uint32 raw_request_len = 3;
  inline bool has_raw_request_len() const;
  inline void clear_raw_request_len();
  static const int kRawRequestLenFieldNumber = 3;
  inline ::google::protobuf::uint32 raw_request_len() const;
  inline void set_raw_request_len(::google::protobuf::uint32 value);

  // optional uint32 snappy_compressed_request_len = 4;
  inline bool has_snappy_compressed_request_len() const;
  inline void clear_snappy_compressed_request_len();
  static const int kSnappyCompressedRequestLenFieldNumber = 4;
  inline ::google::protobuf::uint32 snappy_compressed_request_len() const;
  inline void set_snappy_compressed_request_len(::google::protobuf::uint32 value);

  // optional uint32 checksum = 5;
  inline bool has_checksum() const;
  inline void clear_checksum();
  static const int kChecksumFieldNumber = 5;
  inline ::google::protobuf::uint32 checksum() const;
  inline void set_checksum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:google.protobuf.rpc.wire.RequestHeader)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_raw_request_len();
  inline void clear_has_raw_request_len();
  inline void set_has_snappy_compressed_request_len();
  inline void clear_has_snappy_compressed_request_len();
  inline void set_has_checksum();
  inline void clear_has_checksum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* method_;
  ::google::protobuf::uint32 raw_request_len_;
  ::google::protobuf::uint32 snappy_compressed_request_len_;
  ::google::protobuf::uint32 checksum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();

  void InitAsDefaultInstance();
  static RequestHeader* default_instance_;
};
// -------------------------------------------------------------------

class ResponseHeader : public ::google::protobuf::Message {
 public:
  ResponseHeader();
  virtual ~ResponseHeader();

  ResponseHeader(const ResponseHeader& from);

  inline ResponseHeader& operator=(const ResponseHeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseHeader& default_instance();

  void Swap(ResponseHeader* other);

  // implements Message ----------------------------------------------

  ResponseHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseHeader& from);
  void MergeFrom(const ResponseHeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // xml support -----------------------------------------------------

  // Parse a protocol buffer contained in a string.
  bool ParseFromXmlString(const std::string& data);
  // Like ParseFromXmlString(), but accepts messages that are missing
  // required fields.
  bool ParsePartialFromXmlString(const std::string& data);

  // Serialize the message and store it in the given string.  All required
  // fields must be set.
  bool SerializeToXmlString(std::string* output) const;
  // Like SerializeToXmlString(), but allows missing required fields.
  bool SerializePartialToXmlString(std::string* output) const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional string error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::std::string& error() const;
  inline void set_error(const ::std::string& value);
  inline void set_error(const char* value);
  inline void set_error(const char* value, size_t size);
  inline ::std::string* mutable_error();
  inline ::std::string* release_error();
  inline void set_allocated_error(::std::string* error);

  // optional uint32 raw_response_len = 3;
  inline bool has_raw_response_len() const;
  inline void clear_raw_response_len();
  static const int kRawResponseLenFieldNumber = 3;
  inline ::google::protobuf::uint32 raw_response_len() const;
  inline void set_raw_response_len(::google::protobuf::uint32 value);

  // optional uint32 snappy_compressed_response_len = 4;
  inline bool has_snappy_compressed_response_len() const;
  inline void clear_snappy_compressed_response_len();
  static const int kSnappyCompressedResponseLenFieldNumber = 4;
  inline ::google::protobuf::uint32 snappy_compressed_response_len() const;
  inline void set_snappy_compressed_response_len(::google::protobuf::uint32 value);

  // optional uint32 checksum = 5;
  inline bool has_checksum() const;
  inline void clear_checksum();
  static const int kChecksumFieldNumber = 5;
  inline ::google::protobuf::uint32 checksum() const;
  inline void set_checksum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:google.protobuf.rpc.wire.ResponseHeader)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_raw_response_len();
  inline void clear_has_raw_response_len();
  inline void set_has_snappy_compressed_response_len();
  inline void clear_has_snappy_compressed_response_len();
  inline void set_has_checksum();
  inline void clear_has_checksum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* error_;
  ::google::protobuf::uint32 raw_response_len_;
  ::google::protobuf::uint32 snappy_compressed_response_len_;
  ::google::protobuf::uint32 checksum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_wire_2eproto();
  friend void protobuf_AssignDesc_wire_2eproto();
  friend void protobuf_ShutdownFile_wire_2eproto();

  void InitAsDefaultInstance();
  static ResponseHeader* default_instance_;
};
// ===================================================================


// ===================================================================

// Const

// optional uint32 max_header_len = 1 [default = 1024];
inline bool Const::has_max_header_len() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Const::set_has_max_header_len() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Const::clear_has_max_header_len() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Const::clear_max_header_len() {
  max_header_len_ = 1024u;
  clear_has_max_header_len();
}
inline ::google::protobuf::uint32 Const::max_header_len() const {
  return max_header_len_;
}
inline void Const::set_max_header_len(::google::protobuf::uint32 value) {
  set_has_max_header_len();
  max_header_len_ = value;
}

// -------------------------------------------------------------------

// RequestHeader

// optional uint64 id = 1;
inline bool RequestHeader::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestHeader::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestHeader::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestHeader::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 RequestHeader::id() const {
  return id_;
}
inline void RequestHeader::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional string method = 2;
inline bool RequestHeader::has_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestHeader::set_has_method() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestHeader::clear_has_method() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestHeader::clear_method() {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    method_->clear();
  }
  clear_has_method();
}
inline const ::std::string& RequestHeader::method() const {
  return *method_;
}
inline void RequestHeader::set_method(const ::std::string& value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void RequestHeader::set_method(const char* value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void RequestHeader::set_method(const char* value, size_t size) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RequestHeader::mutable_method() {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  return method_;
}
inline ::std::string* RequestHeader::release_method() {
  clear_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_;
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RequestHeader::set_allocated_method(::std::string* method) {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    delete method_;
  }
  if (method) {
    set_has_method();
    method_ = method;
  } else {
    clear_has_method();
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 raw_request_len = 3;
inline bool RequestHeader::has_raw_request_len() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestHeader::set_has_raw_request_len() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestHeader::clear_has_raw_request_len() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestHeader::clear_raw_request_len() {
  raw_request_len_ = 0u;
  clear_has_raw_request_len();
}
inline ::google::protobuf::uint32 RequestHeader::raw_request_len() const {
  return raw_request_len_;
}
inline void RequestHeader::set_raw_request_len(::google::protobuf::uint32 value) {
  set_has_raw_request_len();
  raw_request_len_ = value;
}

// optional uint32 snappy_compressed_request_len = 4;
inline bool RequestHeader::has_snappy_compressed_request_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RequestHeader::set_has_snappy_compressed_request_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RequestHeader::clear_has_snappy_compressed_request_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RequestHeader::clear_snappy_compressed_request_len() {
  snappy_compressed_request_len_ = 0u;
  clear_has_snappy_compressed_request_len();
}
inline ::google::protobuf::uint32 RequestHeader::snappy_compressed_request_len() const {
  return snappy_compressed_request_len_;
}
inline void RequestHeader::set_snappy_compressed_request_len(::google::protobuf::uint32 value) {
  set_has_snappy_compressed_request_len();
  snappy_compressed_request_len_ = value;
}

// optional uint32 checksum = 5;
inline bool RequestHeader::has_checksum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RequestHeader::set_has_checksum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RequestHeader::clear_has_checksum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RequestHeader::clear_checksum() {
  checksum_ = 0u;
  clear_has_checksum();
}
inline ::google::protobuf::uint32 RequestHeader::checksum() const {
  return checksum_;
}
inline void RequestHeader::set_checksum(::google::protobuf::uint32 value) {
  set_has_checksum();
  checksum_ = value;
}

// -------------------------------------------------------------------

// ResponseHeader

// optional uint64 id = 1;
inline bool ResponseHeader::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseHeader::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseHeader::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseHeader::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 ResponseHeader::id() const {
  return id_;
}
inline void ResponseHeader::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional string error = 2;
inline bool ResponseHeader::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseHeader::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseHeader::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseHeader::clear_error() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    error_->clear();
  }
  clear_has_error();
}
inline const ::std::string& ResponseHeader::error() const {
  return *error_;
}
inline void ResponseHeader::set_error(const ::std::string& value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  error_->assign(value);
}
inline void ResponseHeader::set_error(const char* value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  error_->assign(value);
}
inline void ResponseHeader::set_error(const char* value, size_t size) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  error_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ResponseHeader::mutable_error() {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  return error_;
}
inline ::std::string* ResponseHeader::release_error() {
  clear_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_;
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ResponseHeader::set_allocated_error(::std::string* error) {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (error) {
    set_has_error();
    error_ = error;
  } else {
    clear_has_error();
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 raw_response_len = 3;
inline bool ResponseHeader::has_raw_response_len() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResponseHeader::set_has_raw_response_len() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResponseHeader::clear_has_raw_response_len() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResponseHeader::clear_raw_response_len() {
  raw_response_len_ = 0u;
  clear_has_raw_response_len();
}
inline ::google::protobuf::uint32 ResponseHeader::raw_response_len() const {
  return raw_response_len_;
}
inline void ResponseHeader::set_raw_response_len(::google::protobuf::uint32 value) {
  set_has_raw_response_len();
  raw_response_len_ = value;
}

// optional uint32 snappy_compressed_response_len = 4;
inline bool ResponseHeader::has_snappy_compressed_response_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResponseHeader::set_has_snappy_compressed_response_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResponseHeader::clear_has_snappy_compressed_response_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResponseHeader::clear_snappy_compressed_response_len() {
  snappy_compressed_response_len_ = 0u;
  clear_has_snappy_compressed_response_len();
}
inline ::google::protobuf::uint32 ResponseHeader::snappy_compressed_response_len() const {
  return snappy_compressed_response_len_;
}
inline void ResponseHeader::set_snappy_compressed_response_len(::google::protobuf::uint32 value) {
  set_has_snappy_compressed_response_len();
  snappy_compressed_response_len_ = value;
}

// optional uint32 checksum = 5;
inline bool ResponseHeader::has_checksum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResponseHeader::set_has_checksum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResponseHeader::clear_has_checksum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResponseHeader::clear_checksum() {
  checksum_ = 0u;
  clear_has_checksum();
}
inline ::google::protobuf::uint32 ResponseHeader::checksum() const {
  return checksum_;
}
inline void ResponseHeader::set_checksum(::google::protobuf::uint32 value) {
  set_has_checksum();
  checksum_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace wire
}  // namespace rpc
}  // namespace protobuf
}  // namespace google

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_wire_2eproto__INCLUDED
