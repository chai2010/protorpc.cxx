// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "XmlTest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace protobuf {
namespace xml {

namespace {

const ::google::protobuf::Descriptor* PbMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbXmlTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbXmlTest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PbValueType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_XmlTest_2eproto() {
  protobuf_AddDesc_XmlTest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "XmlTest.proto");
  GOOGLE_CHECK(file != NULL);
  PbMessage_descriptor_ = file->message_type(0);
  static const int PbMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMessage, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMessage, i_),
  };
  PbMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbMessage_descriptor_,
      PbMessage::default_instance_,
      PbMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbMessage));
  PbXmlTest_descriptor_ = file->message_type(1);
  static const int PbXmlTest_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbXmlTest, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbXmlTest, i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbXmlTest, f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbXmlTest, e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbXmlTest, m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbXmlTest, b1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbXmlTest, i1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbXmlTest, f1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbXmlTest, e1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbXmlTest, m1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbXmlTest, bn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbXmlTest, in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbXmlTest, fn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbXmlTest, en_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbXmlTest, mn_),
  };
  PbXmlTest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbXmlTest_descriptor_,
      PbXmlTest::default_instance_,
      PbXmlTest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbXmlTest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbXmlTest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbXmlTest));
  PbValueType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_XmlTest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbMessage_descriptor_, &PbMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbXmlTest_descriptor_, &PbXmlTest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_XmlTest_2eproto() {
  delete PbMessage::default_instance_;
  delete PbMessage_reflection_;
  delete PbXmlTest::default_instance_;
  delete PbXmlTest_reflection_;
}

void protobuf_AddDesc_XmlTest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rXmlTest.proto\022\023google.protobuf.xml\"!\n\t"
    "PbMessage\022\t\n\001b\030\001 \002(\010\022\t\n\001i\030\002 \002(\005\"\275\003\n\tPbXm"
    "lTest\022\017\n\001b\030\001 \002(\010:\004true\022\016\n\001i\030\002 \002(\005:\003123\022\t"
    "\n\001f\030\003 \002(\002\022\?\n\001e\030\004 \002(\0162 .google.protobuf.x"
    "ml.PbValueType:\022PB_VALUE_TYPE_BOOL\022)\n\001m\030"
    "\005 \002(\0132\036.google.protobuf.xml.PbMessage\022\020\n"
    "\002b1\030\013 \001(\010:\004true\022\017\n\002i1\030\014 \001(\005:\003456\022\n\n\002f1\030\r"
    " \001(\002\022\?\n\002e1\030\016 \001(\0162 .google.protobuf.xml.P"
    "bValueType:\021PB_VALUE_TYPE_INT\022*\n\002m1\030\017 \001("
    "\0132\036.google.protobuf.xml.PbMessage\022\n\n\002bn\030"
    "\025 \003(\010\022\n\n\002in\030\026 \003(\005\022\n\n\002fn\030\027 \003(\002\022,\n\002en\030\030 \003("
    "\0162 .google.protobuf.xml.PbValueType\022*\n\002m"
    "n\030\031 \003(\0132\036.google.protobuf.xml.PbMessage*"
    "T\n\013PbValueType\022\026\n\022PB_VALUE_TYPE_NULL\020\000\022\026"
    "\n\022PB_VALUE_TYPE_BOOL\020\001\022\025\n\021PB_VALUE_TYPE_"
    "INT\020\002", 605);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "XmlTest.proto", &protobuf_RegisterTypes);
  PbMessage::default_instance_ = new PbMessage();
  PbXmlTest::default_instance_ = new PbXmlTest();
  PbMessage::default_instance_->InitAsDefaultInstance();
  PbXmlTest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_XmlTest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_XmlTest_2eproto {
  StaticDescriptorInitializer_XmlTest_2eproto() {
    protobuf_AddDesc_XmlTest_2eproto();
  }
} static_descriptor_initializer_XmlTest_2eproto_;

const ::google::protobuf::EnumDescriptor* PbValueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbValueType_descriptor_;
}
bool PbValueType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PbMessage::kBFieldNumber;
const int PbMessage::kIFieldNumber;
#endif  // !_MSC_VER

PbMessage::PbMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbMessage::InitAsDefaultInstance() {
}

PbMessage::PbMessage(const PbMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbMessage::SharedCtor() {
  _cached_size_ = 0;
  b_ = false;
  i_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbMessage::~PbMessage() {
  SharedDtor();
}

void PbMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbMessage_descriptor_;
}

const PbMessage& PbMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XmlTest_2eproto();  return *default_instance_;
}

PbMessage* PbMessage::default_instance_ = NULL;

PbMessage* PbMessage::New() const {
  return new PbMessage;
}

void PbMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    b_ = false;
    i_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool b = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_i;
        break;
      }

      // required int32 i = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_i:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &i_)));
          set_has_i();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool b = 1;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->b(), output);
  }

  // required int32 i = 2;
  if (has_i()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->i(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool b = 1;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->b(), target);
  }

  // required int32 i = 2;
  if (has_i()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->i(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool b = 1;
    if (has_b()) {
      total_size += 1 + 1;
    }

    // required int32 i = 2;
    if (has_i()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->i());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbMessage::MergeFrom(const PbMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_i()) {
      set_i(from.i());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbMessage::CopyFrom(const PbMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

bool PbMessage::ParseFromXmlString(const std::string& data) {
  ::google::protobuf::xml::XmlMessage stub(*const_cast<PbMessage*>(this));
  if(!stub.ParseFromString(data)) {
    GOOGLE_LOG(WARNING) << "ParseFromXmlString failed: " << stub.GetErrorText();
    return false;
  }
  if (!this->IsInitialized()) {
    GOOGLE_LOG(WARNING)
      << "ParseFromXmlString failed: missing required fields: "
      << this->InitializationErrorString();
    return false;
  }
  return true;
}

bool PbMessage::ParsePartialFromXmlString(const std::string& data) {
  ::google::protobuf::xml::XmlMessage stub(*const_cast<PbMessage*>(this));
  if(!stub.ParseFromString(data)) {
    GOOGLE_LOG(WARNING) << "ParsePartialFromXmlString failed: " << stub.GetErrorText();
    return false;
  }
  return true;
}

bool PbMessage::SerializeToXmlString(std::string* output) const {
  output->clear();
  if (!this->IsInitialized()) {
    GOOGLE_LOG(WARNING)
      << "SerializeToXmlString failed: missing required fields: "
      << this->InitializationErrorString();
    return false;
  }

  ::google::protobuf::xml::XmlMessage stub(*const_cast<PbMessage*>(this));
  output->assign(stub.SerializeToString());
  return true;
}

bool PbMessage::SerializePartialToXmlString(std::string* output) const {
  output->clear();

  ::google::protobuf::xml::XmlMessage stub(*const_cast<PbMessage*>(this));
  output->assign(stub.SerializeToString());
  return true;
}

void PbMessage::Swap(PbMessage* other) {
  if (other != this) {
    std::swap(b_, other->b_);
    std::swap(i_, other->i_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbMessage_descriptor_;
  metadata.reflection = PbMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbXmlTest::kBFieldNumber;
const int PbXmlTest::kIFieldNumber;
const int PbXmlTest::kFFieldNumber;
const int PbXmlTest::kEFieldNumber;
const int PbXmlTest::kMFieldNumber;
const int PbXmlTest::kB1FieldNumber;
const int PbXmlTest::kI1FieldNumber;
const int PbXmlTest::kF1FieldNumber;
const int PbXmlTest::kE1FieldNumber;
const int PbXmlTest::kM1FieldNumber;
const int PbXmlTest::kBnFieldNumber;
const int PbXmlTest::kInFieldNumber;
const int PbXmlTest::kFnFieldNumber;
const int PbXmlTest::kEnFieldNumber;
const int PbXmlTest::kMnFieldNumber;
#endif  // !_MSC_VER

PbXmlTest::PbXmlTest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbXmlTest::InitAsDefaultInstance() {
  m_ = const_cast< ::google::protobuf::xml::PbMessage*>(&::google::protobuf::xml::PbMessage::default_instance());
  m1_ = const_cast< ::google::protobuf::xml::PbMessage*>(&::google::protobuf::xml::PbMessage::default_instance());
}

PbXmlTest::PbXmlTest(const PbXmlTest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbXmlTest::SharedCtor() {
  _cached_size_ = 0;
  b_ = true;
  i_ = 123;
  f_ = 0;
  e_ = 1;
  m_ = NULL;
  b1_ = true;
  i1_ = 456;
  f1_ = 0;
  e1_ = 2;
  m1_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbXmlTest::~PbXmlTest() {
  SharedDtor();
}

void PbXmlTest::SharedDtor() {
  if (this != default_instance_) {
    delete m_;
    delete m1_;
  }
}

void PbXmlTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbXmlTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbXmlTest_descriptor_;
}

const PbXmlTest& PbXmlTest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_XmlTest_2eproto();  return *default_instance_;
}

PbXmlTest* PbXmlTest::default_instance_ = NULL;

PbXmlTest* PbXmlTest::New() const {
  return new PbXmlTest;
}

void PbXmlTest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    b_ = true;
    i_ = 123;
    f_ = 0;
    e_ = 1;
    if (has_m()) {
      if (m_ != NULL) m_->::google::protobuf::xml::PbMessage::Clear();
    }
    b1_ = true;
    i1_ = 456;
    f1_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    e1_ = 2;
    if (has_m1()) {
      if (m1_ != NULL) m1_->::google::protobuf::xml::PbMessage::Clear();
    }
  }
  bn_.Clear();
  in_.Clear();
  fn_.Clear();
  en_.Clear();
  mn_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbXmlTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool b = 1 [default = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_i;
        break;
      }

      // required int32 i = 2 [default = 123];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_i:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &i_)));
          set_has_i();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_f;
        break;
      }

      // required float f = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_f:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &f_)));
          set_has_f();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_e;
        break;
      }

      // required .google.protobuf.xml.PbValueType e = 4 [default = PB_VALUE_TYPE_BOOL];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_e:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (google::protobuf::xml::PbValueType_IsValid(value)) {
            set_e(static_cast< google::protobuf::xml::PbValueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m;
        break;
      }

      // required .google.protobuf.xml.PbMessage m = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_b1;
        break;
      }

      // optional bool b1 = 11 [default = true];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_b1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &b1_)));
          set_has_b1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_i1;
        break;
      }

      // optional int32 i1 = 12 [default = 456];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_i1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &i1_)));
          set_has_i1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_f1;
        break;
      }

      // optional float f1 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_f1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &f1_)));
          set_has_f1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_e1;
        break;
      }

      // optional .google.protobuf.xml.PbValueType e1 = 14 [default = PB_VALUE_TYPE_INT];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_e1:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (google::protobuf::xml::PbValueType_IsValid(value)) {
            set_e1(static_cast< google::protobuf::xml::PbValueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_m1;
        break;
      }

      // optional .google.protobuf.xml.PbMessage m1 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_bn;
        break;
      }

      // repeated bool bn = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 168, input, this->mutable_bn())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_bn())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_bn;
        if (input->ExpectTag(176)) goto parse_in;
        break;
      }

      // repeated int32 in = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 176, input, this->mutable_in())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_in())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_in;
        if (input->ExpectTag(189)) goto parse_fn;
        break;
      }

      // repeated float fn = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 189, input, this->mutable_fn())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_fn())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(189)) goto parse_fn;
        if (input->ExpectTag(192)) goto parse_en;
        break;
      }

      // repeated .google.protobuf.xml.PbValueType en = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_en:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (google::protobuf::xml::PbValueType_IsValid(value)) {
            add_en(static_cast< google::protobuf::xml::PbValueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(24, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &google::protobuf::xml::PbValueType_IsValid,
                 this->mutable_en())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_en;
        if (input->ExpectTag(202)) goto parse_mn;
        break;
      }

      // repeated .google.protobuf.xml.PbMessage mn = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_mn;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbXmlTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool b = 1 [default = true];
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->b(), output);
  }

  // required int32 i = 2 [default = 123];
  if (has_i()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->i(), output);
  }

  // required float f = 3;
  if (has_f()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->f(), output);
  }

  // required .google.protobuf.xml.PbValueType e = 4 [default = PB_VALUE_TYPE_BOOL];
  if (has_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->e(), output);
  }

  // required .google.protobuf.xml.PbMessage m = 5;
  if (has_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m(), output);
  }

  // optional bool b1 = 11 [default = true];
  if (has_b1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->b1(), output);
  }

  // optional int32 i1 = 12 [default = 456];
  if (has_i1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->i1(), output);
  }

  // optional float f1 = 13;
  if (has_f1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->f1(), output);
  }

  // optional .google.protobuf.xml.PbValueType e1 = 14 [default = PB_VALUE_TYPE_INT];
  if (has_e1()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->e1(), output);
  }

  // optional .google.protobuf.xml.PbMessage m1 = 15;
  if (has_m1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->m1(), output);
  }

  // repeated bool bn = 21;
  for (int i = 0; i < this->bn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      21, this->bn(i), output);
  }

  // repeated int32 in = 22;
  for (int i = 0; i < this->in_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      22, this->in(i), output);
  }

  // repeated float fn = 23;
  for (int i = 0; i < this->fn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      23, this->fn(i), output);
  }

  // repeated .google.protobuf.xml.PbValueType en = 24;
  for (int i = 0; i < this->en_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->en(i), output);
  }

  // repeated .google.protobuf.xml.PbMessage mn = 25;
  for (int i = 0; i < this->mn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->mn(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbXmlTest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool b = 1 [default = true];
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->b(), target);
  }

  // required int32 i = 2 [default = 123];
  if (has_i()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->i(), target);
  }

  // required float f = 3;
  if (has_f()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->f(), target);
  }

  // required .google.protobuf.xml.PbValueType e = 4 [default = PB_VALUE_TYPE_BOOL];
  if (has_e()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->e(), target);
  }

  // required .google.protobuf.xml.PbMessage m = 5;
  if (has_m()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m(), target);
  }

  // optional bool b1 = 11 [default = true];
  if (has_b1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->b1(), target);
  }

  // optional int32 i1 = 12 [default = 456];
  if (has_i1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->i1(), target);
  }

  // optional float f1 = 13;
  if (has_f1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->f1(), target);
  }

  // optional .google.protobuf.xml.PbValueType e1 = 14 [default = PB_VALUE_TYPE_INT];
  if (has_e1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->e1(), target);
  }

  // optional .google.protobuf.xml.PbMessage m1 = 15;
  if (has_m1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->m1(), target);
  }

  // repeated bool bn = 21;
  for (int i = 0; i < this->bn_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(21, this->bn(i), target);
  }

  // repeated int32 in = 22;
  for (int i = 0; i < this->in_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(22, this->in(i), target);
  }

  // repeated float fn = 23;
  for (int i = 0; i < this->fn_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(23, this->fn(i), target);
  }

  // repeated .google.protobuf.xml.PbValueType en = 24;
  for (int i = 0; i < this->en_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->en(i), target);
  }

  // repeated .google.protobuf.xml.PbMessage mn = 25;
  for (int i = 0; i < this->mn_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->mn(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbXmlTest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool b = 1 [default = true];
    if (has_b()) {
      total_size += 1 + 1;
    }

    // required int32 i = 2 [default = 123];
    if (has_i()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->i());
    }

    // required float f = 3;
    if (has_f()) {
      total_size += 1 + 4;
    }

    // required .google.protobuf.xml.PbValueType e = 4 [default = PB_VALUE_TYPE_BOOL];
    if (has_e()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->e());
    }

    // required .google.protobuf.xml.PbMessage m = 5;
    if (has_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m());
    }

    // optional bool b1 = 11 [default = true];
    if (has_b1()) {
      total_size += 1 + 1;
    }

    // optional int32 i1 = 12 [default = 456];
    if (has_i1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->i1());
    }

    // optional float f1 = 13;
    if (has_f1()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .google.protobuf.xml.PbValueType e1 = 14 [default = PB_VALUE_TYPE_INT];
    if (has_e1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->e1());
    }

    // optional .google.protobuf.xml.PbMessage m1 = 15;
    if (has_m1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m1());
    }

  }
  // repeated bool bn = 21;
  {
    int data_size = 0;
    data_size = 1 * this->bn_size();
    total_size += 2 * this->bn_size() + data_size;
  }

  // repeated int32 in = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->in_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->in(i));
    }
    total_size += 2 * this->in_size() + data_size;
  }

  // repeated float fn = 23;
  {
    int data_size = 0;
    data_size = 4 * this->fn_size();
    total_size += 2 * this->fn_size() + data_size;
  }

  // repeated .google.protobuf.xml.PbValueType en = 24;
  {
    int data_size = 0;
    for (int i = 0; i < this->en_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->en(i));
    }
    total_size += 2 * this->en_size() + data_size;
  }

  // repeated .google.protobuf.xml.PbMessage mn = 25;
  total_size += 2 * this->mn_size();
  for (int i = 0; i < this->mn_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mn(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbXmlTest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbXmlTest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbXmlTest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbXmlTest::MergeFrom(const PbXmlTest& from) {
  GOOGLE_CHECK_NE(&from, this);
  bn_.MergeFrom(from.bn_);
  in_.MergeFrom(from.in_);
  fn_.MergeFrom(from.fn_);
  en_.MergeFrom(from.en_);
  mn_.MergeFrom(from.mn_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_i()) {
      set_i(from.i());
    }
    if (from.has_f()) {
      set_f(from.f());
    }
    if (from.has_e()) {
      set_e(from.e());
    }
    if (from.has_m()) {
      mutable_m()->::google::protobuf::xml::PbMessage::MergeFrom(from.m());
    }
    if (from.has_b1()) {
      set_b1(from.b1());
    }
    if (from.has_i1()) {
      set_i1(from.i1());
    }
    if (from.has_f1()) {
      set_f1(from.f1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_e1()) {
      set_e1(from.e1());
    }
    if (from.has_m1()) {
      mutable_m1()->::google::protobuf::xml::PbMessage::MergeFrom(from.m1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbXmlTest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbXmlTest::CopyFrom(const PbXmlTest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbXmlTest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_m()) {
    if (!this->m().IsInitialized()) return false;
  }
  if (has_m1()) {
    if (!this->m1().IsInitialized()) return false;
  }
  for (int i = 0; i < mn_size(); i++) {
    if (!this->mn(i).IsInitialized()) return false;
  }
  return true;
}

bool PbXmlTest::ParseFromXmlString(const std::string& data) {
  ::google::protobuf::xml::XmlMessage stub(*const_cast<PbXmlTest*>(this));
  if(!stub.ParseFromString(data)) {
    GOOGLE_LOG(WARNING) << "ParseFromXmlString failed: " << stub.GetErrorText();
    return false;
  }
  if (!this->IsInitialized()) {
    GOOGLE_LOG(WARNING)
      << "ParseFromXmlString failed: missing required fields: "
      << this->InitializationErrorString();
    return false;
  }
  return true;
}

bool PbXmlTest::ParsePartialFromXmlString(const std::string& data) {
  ::google::protobuf::xml::XmlMessage stub(*const_cast<PbXmlTest*>(this));
  if(!stub.ParseFromString(data)) {
    GOOGLE_LOG(WARNING) << "ParsePartialFromXmlString failed: " << stub.GetErrorText();
    return false;
  }
  return true;
}

bool PbXmlTest::SerializeToXmlString(std::string* output) const {
  output->clear();
  if (!this->IsInitialized()) {
    GOOGLE_LOG(WARNING)
      << "SerializeToXmlString failed: missing required fields: "
      << this->InitializationErrorString();
    return false;
  }

  ::google::protobuf::xml::XmlMessage stub(*const_cast<PbXmlTest*>(this));
  output->assign(stub.SerializeToString());
  return true;
}

bool PbXmlTest::SerializePartialToXmlString(std::string* output) const {
  output->clear();

  ::google::protobuf::xml::XmlMessage stub(*const_cast<PbXmlTest*>(this));
  output->assign(stub.SerializeToString());
  return true;
}

void PbXmlTest::Swap(PbXmlTest* other) {
  if (other != this) {
    std::swap(b_, other->b_);
    std::swap(i_, other->i_);
    std::swap(f_, other->f_);
    std::swap(e_, other->e_);
    std::swap(m_, other->m_);
    std::swap(b1_, other->b1_);
    std::swap(i1_, other->i1_);
    std::swap(f1_, other->f1_);
    std::swap(e1_, other->e1_);
    std::swap(m1_, other->m1_);
    bn_.Swap(&other->bn_);
    in_.Swap(&other->in_);
    fn_.Swap(&other->fn_);
    en_.Swap(&other->en_);
    mn_.Swap(&other->mn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbXmlTest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbXmlTest_descriptor_;
  metadata.reflection = PbXmlTest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace xml
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
